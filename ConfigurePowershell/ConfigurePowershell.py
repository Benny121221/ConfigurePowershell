import os
import json

cfg_filename = "config.json"
begin_delimiter = "# WHERE1 AUTOGENERATED CODE BEGIN\n"
end_delimiter = "# WHERE1 AUTOGENERATED CODE END\n"

class NotValidError(BaseException):
	pass

def create_cfg_file_if_not_exist():
	cwd = os.getcwd()
	if os.path.isfile(cwd + "/" + cfg_filename):
		pass
	else:
		default_cfg = { 
		   "profile_filepath" : "",
		   "git_branch_prompt" : True,
		   "aliases" : []
		}

		f = open(cwd + "/" + cfg_filename, "x")
		f.write(json.dumps(default_cfg, indent=4))
		f.close()

def sync():
	cwd = os.getcwd()
	if os.path.isfile(cwd + "/" + cfg_filename):
		try:
			cfg_file = open(cwd + "/" + cfg_filename)
			cfg_settings = json.loads(cfg_file.read())
			if cfg_settings["profile_filepath"] == "":
				raise NotValidError()


			profile_file_read = open(cfg_settings["profile_filepath"])

			linenum_begin = 0
			linenum_end = 0

			begin_found = False
			end_found = False
			for line in profile_file_read:
				if line.strip() == begin_delimiter.strip():
					begin_found = True
				elif not begin_found:
					linenum_begin += 1

				if line.strip() == end_delimiter.strip():
					end_found = True
				elif not end_found:
					linenum_end += 1

			output = ""

			profile_file_read.seek(0)

			linenum = 0
			for line in profile_file_read:
				if(linenum < linenum_begin or linenum > linenum_end):
					output += line
				linenum += 1

			profile_file_read.close()
			profile_file_write = open(cfg_settings["profile_filepath"], "w")

			output += begin_delimiter
			if(cfg_settings["git_branch_prompt"]):
				output += """
function prompt{
	$host.ui.rawui.WindowTitle = $(get-location)

	if(Test-Path .git) {
		git branch | foreach {
			if ($_ -match "^\*(.*)"){
				Write-Host ($matches[1] + " ") -NoNewline -ForegroundColor Yellow
			}
		}
	}

	Write-Host ($pwd.path + ">") -NoNewline
	
	return " " 	# Don't want to return anything, or it will be written too
				# However, you need to return a string
}
"""
				
				output+= "\n"

				for alias in cfg_settings["aliases"]:
					output += f"Set-Alias {alias[0]} {alias[1]}\n"

				output += "\n"

				output += end_delimiter
				profile_file_write.write(output)

				profile_file_write.close()



		except NotValidError:
			print("ERROR: Config file not valid.")
	else:
		print("ERROR: Config file not found.")



create_cfg_file_if_not_exist()
sync()


